package com.lingbang.mapper;


import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class UserSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    public String countByExample(UserCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("t_users");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    public String deleteByExample(UserCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("t_users");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    public String insertSelective(User record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("t_users");

        if (record.getOid() != null) {
            sql.VALUES("OID", "#{oid,jdbcType=VARCHAR}");
        }

        if (record.getUserId() != null) {
            sql.VALUES("USER_ID", "#{userId,jdbcType=VARCHAR}");
        }

        if (record.getUsername() != null) {
            sql.VALUES("USERNAME", "#{username,jdbcType=VARCHAR}");
        }

        if (record.getPassword() != null) {
            sql.VALUES("PASSWORD", "#{password,jdbcType=VARCHAR}");
        }

        if (record.getName() != null) {
            sql.VALUES("NAME", "#{name,jdbcType=VARCHAR}");
        }

        if (record.getTelno() != null) {
            sql.VALUES("TELNO", "#{telno,jdbcType=CHAR}");
        }

        if (record.getPhoneno() != null) {
            sql.VALUES("PHONENO", "#{phoneno,jdbcType=VARCHAR}");
        }

        if (record.getCreditno() != null) {
            sql.VALUES("CREDITNO", "#{creditno,jdbcType=VARCHAR}");
        }

        if (record.getAddress() != null) {
            sql.VALUES("ADDRESS", "#{address,jdbcType=VARCHAR}");
        }

        if (record.getSex() != null) {
            sql.VALUES("SEX", "#{sex,jdbcType=SMALLINT}");
        }

        if (record.getBirthday() != null) {
            sql.VALUES("BIRTHDAY", "#{birthday,jdbcType=CHAR}");
        }

        if (record.getOwnehouse() != null) {
            sql.VALUES("OWNEHOUSE", "#{ownehouse,jdbcType=VARCHAR}");
        }

        if (record.getOwnepro() != null) {
            sql.VALUES("OWNEPRO", "#{ownepro,jdbcType=VARCHAR}");
        }

        if (record.getClasses() != null) {
            sql.VALUES("CLASSES", "#{classes,jdbcType=SMALLINT}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    public String selectByExample(UserCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("OID");
        } else {
            sql.SELECT("OID");
        }
        sql.SELECT("USER_ID");
        sql.SELECT("USERNAME");
        sql.SELECT("PASSWORD");
        sql.SELECT("NAME");
        sql.SELECT("TELNO");
        sql.SELECT("PHONENO");
        sql.SELECT("CREDITNO");
        sql.SELECT("ADDRESS");
        sql.SELECT("SEX");
        sql.SELECT("BIRTHDAY");
        sql.SELECT("OWNEHOUSE");
        sql.SELECT("OWNEPRO");
        sql.SELECT("CLASSES");
        sql.FROM("t_users");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        User record = (User) parameter.get("record");
        UserCriteria example = (UserCriteria) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("t_users");

        if (record.getOid() != null) {
            sql.SET("OID = #{record.oid,jdbcType=VARCHAR}");
        }

        if (record.getUserId() != null) {
            sql.SET("USER_ID = #{record.userId,jdbcType=VARCHAR}");
        }

        if (record.getUsername() != null) {
            sql.SET("USERNAME = #{record.username,jdbcType=VARCHAR}");
        }

        if (record.getPassword() != null) {
            sql.SET("PASSWORD = #{record.password,jdbcType=VARCHAR}");
        }

        if (record.getName() != null) {
            sql.SET("NAME = #{record.name,jdbcType=VARCHAR}");
        }

        if (record.getTelno() != null) {
            sql.SET("TELNO = #{record.telno,jdbcType=CHAR}");
        }

        if (record.getPhoneno() != null) {
            sql.SET("PHONENO = #{record.phoneno,jdbcType=VARCHAR}");
        }

        if (record.getCreditno() != null) {
            sql.SET("CREDITNO = #{record.creditno,jdbcType=VARCHAR}");
        }

        if (record.getAddress() != null) {
            sql.SET("ADDRESS = #{record.address,jdbcType=VARCHAR}");
        }

        if (record.getSex() != null) {
            sql.SET("SEX = #{record.sex,jdbcType=SMALLINT}");
        }

        if (record.getBirthday() != null) {
            sql.SET("BIRTHDAY = #{record.birthday,jdbcType=CHAR}");
        }

        if (record.getOwnehouse() != null) {
            sql.SET("OWNEHOUSE = #{record.ownehouse,jdbcType=VARCHAR}");
        }

        if (record.getOwnepro() != null) {
            sql.SET("OWNEPRO = #{record.ownepro,jdbcType=VARCHAR}");
        }

        if (record.getClasses() != null) {
            sql.SET("CLASSES = #{record.classes,jdbcType=SMALLINT}");
        }

        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("t_users");

        sql.SET("OID = #{record.oid,jdbcType=VARCHAR}");
        sql.SET("USER_ID = #{record.userId,jdbcType=VARCHAR}");
        sql.SET("USERNAME = #{record.username,jdbcType=VARCHAR}");
        sql.SET("PASSWORD = #{record.password,jdbcType=VARCHAR}");
        sql.SET("NAME = #{record.name,jdbcType=VARCHAR}");
        sql.SET("TELNO = #{record.telno,jdbcType=CHAR}");
        sql.SET("PHONENO = #{record.phoneno,jdbcType=VARCHAR}");
        sql.SET("CREDITNO = #{record.creditno,jdbcType=VARCHAR}");
        sql.SET("ADDRESS = #{record.address,jdbcType=VARCHAR}");
        sql.SET("SEX = #{record.sex,jdbcType=SMALLINT}");
        sql.SET("BIRTHDAY = #{record.birthday,jdbcType=CHAR}");
        sql.SET("OWNEHOUSE = #{record.ownehouse,jdbcType=VARCHAR}");
        sql.SET("OWNEPRO = #{record.ownepro,jdbcType=VARCHAR}");
        sql.SET("CLASSES = #{record.classes,jdbcType=SMALLINT}");

        UserCriteria example = (UserCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(User record) {
        SQL sql = new SQL();
        sql.UPDATE("t_users");

        if (record.getUserId() != null) {
            sql.SET("USER_ID = #{userId,jdbcType=VARCHAR}");
        }

        if (record.getUsername() != null) {
            sql.SET("USERNAME = #{username,jdbcType=VARCHAR}");
        }

        if (record.getPassword() != null) {
            sql.SET("PASSWORD = #{password,jdbcType=VARCHAR}");
        }

        if (record.getName() != null) {
            sql.SET("NAME = #{name,jdbcType=VARCHAR}");
        }

        if (record.getTelno() != null) {
            sql.SET("TELNO = #{telno,jdbcType=CHAR}");
        }

        if (record.getPhoneno() != null) {
            sql.SET("PHONENO = #{phoneno,jdbcType=VARCHAR}");
        }

        if (record.getCreditno() != null) {
            sql.SET("CREDITNO = #{creditno,jdbcType=VARCHAR}");
        }

        if (record.getAddress() != null) {
            sql.SET("ADDRESS = #{address,jdbcType=VARCHAR}");
        }

        if (record.getSex() != null) {
            sql.SET("SEX = #{sex,jdbcType=SMALLINT}");
        }

        if (record.getBirthday() != null) {
            sql.SET("BIRTHDAY = #{birthday,jdbcType=CHAR}");
        }

        if (record.getOwnehouse() != null) {
            sql.SET("OWNEHOUSE = #{ownehouse,jdbcType=VARCHAR}");
        }

        if (record.getOwnepro() != null) {
            sql.SET("OWNEPRO = #{ownepro,jdbcType=VARCHAR}");
        }

        if (record.getClasses() != null) {
            sql.SET("CLASSES = #{classes,jdbcType=SMALLINT}");
        }

        sql.WHERE("OID = #{oid,jdbcType=VARCHAR}");

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_users
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, UserCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<UserCriteria.Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            UserCriteria.Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<UserCriteria.Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    UserCriteria.Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}